{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Payman","text":"<p>Payman is a Python package for integrating with Iranian payment gateways like Zarinpal and Zibal. It provides a clean and flexible interface for handling payments in both sync and async Python applications.</p>"},{"location":"#what-is-payman","title":"What is Payman?","text":"<p>Payman provides everything you need to work with popular Iranian payment gateways:</p> <ul> <li>Requesting payments</li> <li>Redirecting users to the payment page</li> <li>Verifying completed transactions</li> <li>Handling gateway-specific errors and inconsistencies</li> </ul> <p>It provides a unified and developer-friendly interface that works consistently across multiple providers.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Simple and consistent API  You can focus on your business logic \u2014 HTTP calls, serialization, and gateway-specific details are handled internally.</p> </li> <li> <p>Supports both sync and async  Compatible with synchronous and asynchronous code, including FastAPI, Flask, scripts, and background tasks.</p> </li> <li> <p>Pydantic models for inputs and outputs   Type-safe, auto-validating models make integration predictable and IDE-friendly.</p> </li> <li> <p>Modular and extensible design  Each gateway integration is separated. You can include only what you need or extend the package with your own gateway.</p> </li> <li> <p>Unified error handling  Common exception classes are used across gateways, with optional gateway-specific errors when needed.</p> </li> <li> <p>Suitable for real projects  Designed to be usable in real applications, from small services to larger deployments.</p> </li> </ul>"},{"location":"#supported-gateways","title":"Supported Gateways","text":"<p>Currently supported gateways include:</p> <ul> <li>Zarinpal</li> <li>Zibal</li> </ul> <p>More providers (like IDPay, NextPay, etc.) are planned for future releases.</p>"},{"location":"#quick-example","title":"Quick Example","text":"<p>Here's how to quickly request a payment using Zibal:</p> <pre><code>import asyncio\nfrom payman import Payman\nfrom payman.errors import GatewayError\n\npay = Payman(\"zibal\", merchant_id=\"...\")\n\nasync def process_payment():\n    try:\n        # Step 1: Create payment request\n        payment = await pay.payment(\n            amount=25_000,\n            callback_url=\"https://your-site.com/callback\",\n            description=\"Order #123\"\n        )\n    except GatewayError as e:\n        print(f\"[Error] Payment request failed: {e}\")\n        return\n\n    if not payment.success:\n        print(f\"[Create Failed] {payment.message} (code: {payment.code})\")\n        return\n\n    print(f\"[Redirect] {pay.get_payment_redirect_url(payment.track_id)}\")\n\n    # Simulate waiting for user to return from gateway\n    await asyncio.sleep(2)  # Just for example purposes\n\n    try:\n        # Step 2: Verify transaction\n        verify = await pay.verify(track_id=payment.track_id)\n    except GatewayError as e:\n        print(f\"[Error] Verification failed: {e}\")\n        return\n\n    if verify.success:\n        print(f\"[Success] Payment confirmed. Ref ID: {verify.ref_id}\")\n    elif verify.already_verified:\n        print(\"[Notice] Payment already verified.\")\n    else:\n        print(f\"[Verify Failed] {verify.message} (code: {verify.code})\")\n\nasyncio.run(process_payment())\n</code></pre> <p>You can also use the package in async mode with frameworks like FastAPI.</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<p>To help you get started with Payman, check out the following pages:</p> <ul> <li> <p>Installation \u2013 How to install and set up Payman.</p> </li> <li> <p>Usage Guide \u2013 How to work with different gateways.</p> </li> <li> <p>API Reference \u2013 Full reference for all available methods and classes.</p> </li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions, feedback, and bug reports. Visit our GitHub repository to check issues, submit pull requests, or suggest improvements.</p>"},{"location":"#license","title":"License","text":"<p>Payman is licensed under the GNU GPL v3 license. You are free to use, modify, and distribute it under the terms of this license.</p> <p>Need help? Want to request a new gateway? Open an issue on GitHub or contact the maintainer.</p>"},{"location":"api/","title":"Payman API Reference","text":"<p>Welcome to the Payman API documentation. This section provides a unified interface for interacting with multiple Iranian payment gateways, including:</p> <ul> <li>ZarinPal</li> <li>Zibal</li> </ul>"},{"location":"api/#usage-overview","title":"\ufe0f Usage Overview","text":"<p>Payman provides a consistent and developer-friendly API for initiating, verifying, and reversing payments \u2014 regardless of the gateway provider. All gateways follow the same public interface and support both synchronous and asynchronous usage out-of-the-box.</p>"},{"location":"api/#example","title":"Example","text":"<pre><code>from payman import Payman\n\ngateway = Payman(\"zarinpal\", merchant_id=\"YOUR-ID\")\nresponse = await gateway.payment(...)\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>This page will help you install and set up Payman in your Python project in just a few steps.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or higher  </li> <li>pip (Python package installer)</li> </ul> <p>Check your Python version:</p> <pre><code>python --version\n</code></pre>"},{"location":"installation/#installing-via-pip","title":"Installing via pip","text":"<p>The easiest way to install Payman is via PyPI: <pre><code>pip install -U payman\n</code></pre></p> <p>Or, if you want the latest development version, install directly from GitHub: <pre><code>pip install git+https://github.com/irvaniamirali/payman.git\n</code></pre></p>"},{"location":"installation/#optional-using-a-virtual-environment","title":"(Optional) Using a Virtual Environment","text":"<p>It's recommended to use a virtual environment to keep dependencies isolated: <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Linux/macOS\n.venv\\Scripts\\activate     # On Windows\n</code></pre></p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide will help you understand how to use Payman in your project and integrate with specific gateways.</p>"},{"location":"usage/#supported-gateways","title":"Supported Gateways","text":"<p>Each gateway comes with its own usage guide and example code. Click on the links below to view detailed documentation:</p> <ul> <li>ZarinPal</li> <li>Zibal</li> </ul>"},{"location":"usage/#common-workflow","title":"Common Workflow","text":"<p>Regardless of the gateway, the typical payment flow includes:</p> <ol> <li>Creating a payment request</li> <li>Redirecting the user to the payment gateway</li> <li>Handling the callback</li> <li>Verifying the payment</li> </ol> <p>Payman standardizes this flow across all gateways, so once you're familiar with one, switching to another is easy.</p> <p>For advanced usage or contributing custom gateways, see the API Reference.</p>"},{"location":"gateways/zarinpal/api/","title":"Api","text":"<p>from payman.gateways.zarinpal import PaymentRequest</p>"},{"location":"gateways/zarinpal/api/#zarinpal-api-reference","title":"ZarinPal API Reference","text":"<p>This page documents the public API for the <code>ZarinPal</code> gateway class in the Payman package.</p> <p>ZarinPal supports both synchronous and asynchronous usage. All methods behave the same regardless of the execution context.</p> <p>Official ZarinPal API Reference: ZarinPal Docs</p>"},{"location":"gateways/zarinpal/api/#instantiating-a-gateway","title":"Instantiating a Gateway","text":"<p>By default, you should use the <code>Payman</code> wrapper class to work with any gateway:</p> <p><pre><code>from payman import Payman\n\npay = Payman(\"zarinpal\", merchant_id=\"...\")\n</code></pre> This approach allows you to switch gateways dynamically and keeps your code clean and consistent.</p>"},{"location":"gateways/zarinpal/api/#using-the-zarinpal-gateway-directly","title":"Using the ZarinPal Gateway Directly","text":"<p>While it's recommended to use the generic <code>Payman</code> wrapper for consistency,  you can also instantiate the ZarinPal gateway directly:</p> <p><pre><code>from payman import ZarinPal\n\npay = ZarinPal(merchant_id=\"...\")\n</code></pre> This can be useful if you're working exclusively with one gateway and prefer to import it directly.</p>"},{"location":"gateways/zarinpal/api/#class-zarinpal","title":"Class: <code>ZarinPal</code>","text":"<pre><code>from payman import ZarinPal\n</code></pre>"},{"location":"gateways/zarinpal/api/#constructor","title":"Constructor","text":"<pre><code>ZarinPal(merchant_id: str, version: int = 4, sandbox: bool = False, **client_options)\n</code></pre>"},{"location":"gateways/zarinpal/api/#parameters","title":"Parameters:","text":"<ul> <li><code>merchant_id</code> (str): Your ZarinPal merchant ID (UUID).</li> <li><code>version</code> (int): API version (default: 4).</li> <li><code>sandbox</code> (bool): Use sandbox environment if <code>True</code>.</li> <li><code>client_options</code>: Optional keyword arguments passed to the internal HTTP client.</li> </ul>"},{"location":"gateways/zarinpal/api/#methods","title":"Methods","text":""},{"location":"gateways/zarinpal/api/#paymentparams-paymentrequest-dict-none-none-paymentresponse","title":"<code>payment(params: PaymentRequest | dict | None = None) -&gt; PaymentResponse</code>","text":"<p>Initiates a new payment transaction request.</p>"},{"location":"gateways/zarinpal/api/#parameters_1","title":"Parameters:","text":"<p><code>params</code> (<code>PaymentRequest</code>) - Contains payment details.</p> Field Type Required Description <code>amount</code> <code>int</code> (&gt;= 1000) \u2705 Amount in IRR (minimum 1000) <code>currency</code> <code>str</code> (\"IRR\" or \"IRT\") \u274c Currency type (default: \"IRR\") <code>description</code> <code>str</code> \u2705 Payment description <code>callback_url</code> <code>HttpUrl | str</code> \u2705 URL to redirect user after payment <code>metadata</code> <code>PaymentMetadata | dict | None</code> \u274c Optional metadata (e.g., mobile, email, order_id) <code>referrer_id</code> <code>str | None</code> \u274c Optional reseller tracking ID <code>wages</code> <code>list[Wage]</code> (1 to 5 items) \u274c Revenue sharing details between IBANs <p><code>PaymentMetadata</code> \u2014 Optional metadata passed as the <code>metadata</code> field of <code>PaymentRequest</code>. The <code>metadata</code> field in <code>PaymentRequest</code> can include optional information such as the user's mobile number, email, or internal order ID. It accepts a <code>PaymentMetadata</code> object or a compatible dictionary.</p> Field Type Description <code>mobile</code> <code>str</code> (regex: <code>^09\\d{9}$</code>) Mobile number of the user <code>email</code> <code>EmailStr | str | None</code> Email address of the user <code>order_id</code> <code>str | None</code> Optional order ID for internal tracking"},{"location":"gateways/zarinpal/api/#returns","title":"Returns","text":"<p><code>PaymentResponse</code> - Gateway response after processing the payment.</p> <p>Returned after a successful payment request</p> Field Type Description <code>code</code> <code>int</code> Result status code <code>message</code> <code>str</code> Description of the status <code>authority</code> <code>str</code> Unique payment session ID <code>fee_type</code> <code>str</code> Entity responsible for transaction fee <code>fee</code> <code>int</code> Amount of fee in IRR"},{"location":"gateways/zarinpal/api/#raises","title":"Raises","text":"<ul> <li><code>PaymentGatewayError</code> \u2014 Base exception for gateway issues</li> <li><code>ValidationError</code> \u2014 If request payload is invalid</li> </ul>"},{"location":"gateways/zarinpal/api/#example","title":"Example","text":"<pre><code>response = gateway.payment(\n    PaymentRequest(\n        amount=10000,\n        description=\"Purchase\",\n        callback_url=\"https://example.com/callback\"\n    )\n)\n</code></pre>"},{"location":"gateways/zarinpal/api/#verifyparams-verifyrequest-dict-none-none-verifyresponse","title":"<code>verify(params: VerifyRequest | dict | None = None) -&gt; VerifyResponse</code>","text":"<p>Verifies the result of a completed payment.</p>"},{"location":"gateways/zarinpal/api/#parameters_2","title":"Parameters:","text":"<p><code>params</code> (<code>VerifyRequest</code>) \u2014 Request to verify a payment session.</p> Field Type Required Description <code>amount</code> <code>int</code> (\u2265 1000) \u2705 Must match the original payment amount <code>authority</code> <code>str</code> \u2705 The authority code returned by ZarinPal"},{"location":"gateways/zarinpal/api/#returns_1","title":"Returns","text":"<p><code>VerifyResponse</code> \u2014 Contains transaction info and success details.</p> Field Type Description <code>code</code> <code>int</code> Verification result code <code>ref_id</code> <code>int | None</code> Unique transaction reference (if successful) <code>card_pan</code> <code>str | None</code> Masked card number used for the payment <code>card_hash</code> <code>str | None</code> SHA256 hash of the card number <code>fee_type</code> <code>str | None</code> Indicates who paid the transaction fee <code>fee</code> <code>int | None</code> Transaction fee in IRR <code>message</code> <code>str | None</code> Gateway message or error detail <code>wages</code> <code>list[WageResponse] | None</code> Returned if revenue sharing was used"},{"location":"gateways/zarinpal/api/#raises_1","title":"Raises","text":"<ul> <li><code>PaymentGatewayError</code></li> <li><code>AlreadyVerifiedError</code></li> <li><code>PaymentNotCompletedError</code></li> </ul>"},{"location":"gateways/zarinpal/api/#get_payment_redirect_urlauthority-str-str","title":"<code>get_payment_redirect_url(authority: str) -&gt; str</code>","text":"<p>Returns the URL to redirect the user to ZarinPal's payment page.</p>"},{"location":"gateways/zarinpal/api/#parameters_3","title":"Parameters","text":"<p><code>authority</code> (<code>str</code>) \u2014 The unique authority code received from a successful payment request.</p>"},{"location":"gateways/zarinpal/api/#returns_2","title":"Returns","text":"<p>A <code>str</code> representing the full redirect URL (sandbox or production based on config).</p>"},{"location":"gateways/zarinpal/api/#example_1","title":"Example","text":"<pre><code>url = gateway.get_payment_redirect_url(authority)\n</code></pre>"},{"location":"gateways/zarinpal/api/#reverseparams-reverserequest-dict-none-none-reverseresponse","title":"<code>reverse(params: ReverseRequest | dict | None = None) -&gt; ReverseResponse</code>","text":"<p>Reverse a pending or unsettled transaction.</p>"},{"location":"gateways/zarinpal/api/#parameters_4","title":"Parameters","text":"<p><code>params</code> (<code>ReverseRequest</code>) \u2014 Contains the authority code of the transaction to reverse.</p> Field Type Required Description <code>authority</code> <code>str</code> \u2705 The authority code of the target payment"},{"location":"gateways/zarinpal/api/#returns_3","title":"Returns","text":"<p><code>ReverseResponse</code> \u2014 The result of the reverse request.</p> Field Type Description <code>code</code> <code>int</code> Result status code <code>message</code> <code>str</code> Result message from ZarinPal"},{"location":"gateways/zarinpal/api/#raises_2","title":"Raises","text":"<ul> <li><code>PaymentGatewayError</code></li> <li><code>ReverseError</code></li> <li><code>ValidationError</code></li> <li><code>SessionError</code></li> </ul>"},{"location":"gateways/zarinpal/api/#get_unverified_payments-unverifiedpayments","title":"<code>get_unverified_payments() -&gt; UnverifiedPayments</code>","text":"<p>Retrieves all successful payments that have not yet been verified (i.e. no <code>verify(...)</code> call has been made for them yet).</p>"},{"location":"gateways/zarinpal/api/#parameters_5","title":"Parameters","text":"<p>None This method does not take any parameters. It uses your configured merchant credentials to fetch unverified transactions from ZarinPal.</p>"},{"location":"gateways/zarinpal/api/#returns_4","title":"Returns","text":"<p><code>UnverifiedPayments</code> \u2014 A container with metadata and a list of <code>UnverifiedTransaction</code> items.</p> Field Type Description <code>code</code> <code>int</code> Result status code <code>message</code> <code>str</code> Gateway response message <code>authorities</code> <code>list[UnverifiedTransaction]</code> List of unverified transaction records"},{"location":"gateways/zarinpal/api/#related-models","title":"Related Models","text":"<ul> <li><code>UnverifiedTransaction</code> Represents a single unverified payment session.</li> </ul> Field Type Description <code>authority</code> <code>str</code> Unique authority code <code>amount</code> <code>int</code> Payment amount in IRR <code>callback_url</code> <code>HttpUrl</code> The original callback URL for the transaction <code>referer</code> <code>str | None</code> Optional referer header (if available) <code>date</code> <code>datetime</code> Timestamp of the transaction"},{"location":"gateways/zarinpal/api/#example_2","title":"Example","text":"<pre><code>unverified = gateway.get_unverified_payments()\nfor tx in unverified.authorities:\n    print(tx.authority)\n</code></pre>"},{"location":"gateways/zarinpal/api/#error-handling","title":"Error Handling","text":"<p>All exceptions inherit from <code>ZarinPalError</code>, which is a subclass of <code>PaymentGatewayError</code>.</p>"},{"location":"gateways/zarinpal/api/#common-exceptions","title":"Common Exceptions","text":"<pre><code>from payman.gateways.zarinpal.errors import *\n</code></pre> <ul> <li><code>ValidationError</code></li> <li><code>MerchantIDError</code></li> <li><code>TerminalError</code></li> <li><code>PaymentError</code></li> <li><code>SessionError</code></li> <li><code>AuthorityError</code></li> <li><code>ReverseError</code></li> <li><code>AlreadyVerifiedError</code></li> <li><code>PaymentNotCompletedError</code></li> </ul>"},{"location":"gateways/zarinpal/api/#example-usage","title":"Example Usage","text":"<pre><code>from payman.errors import GatewayError\n\ntry:\n    response = pay.payment(PaymentRequest(...))\nexcept GatewayError as e:\n    print(\"Payment failed:\", e)\n</code></pre>"},{"location":"gateways/zarinpal/api/#notes","title":"Notes","text":"<ul> <li>All methods work seamlessly in both sync and async environments.</li> <li>Always use try/except blocks when dealing with external gateways.</li> <li>For practical usage, refer to: ZarinPal Usage Guide</li> </ul>"},{"location":"gateways/zarinpal/usage/","title":"Using ZarinPal Gateway with Payman","text":"<p>This section guides you on how to integrate the ZarinPal payment gateway using the Payman Python package. You will find examples for both asynchronous and synchronous usage to fit different application needs.</p>"},{"location":"gateways/zarinpal/usage/#quick-start-guide-for-zarinpal-integration","title":"Quick Start Guide for ZarinPal Integration","text":"<p>Follow these simple steps to integrate ZarinPal payment gateway with Payman:</p>"},{"location":"gateways/zarinpal/usage/#1-initialize-the-gateway","title":"1. Initialize the Gateway","text":"<p>Import <code>Payman</code> and create an instance with your merchant ID:</p> <pre><code>from payman import Payman\n\npay = Payman(\"zarinpal\", merchant_id=\"YOUR-MERCHANT-ID\")\n</code></pre>"},{"location":"gateways/zarinpal/usage/#note-sandbox-mode-for-development","title":"Note: Sandbox Mode for Development","text":"<p>When developing or testing your integration with ZarinPal, you should use sandbox mode to avoid real transactions. To enable sandbox mode:</p> <ul> <li>Use a randomly generated UUID (version 4) as your <code>merchant_id</code>.</li> <li>Set the <code>sandbox=True</code> flag when creating the <code>Payman</code> instance:</li> </ul> <p><pre><code>from payman import Payman\n\npay = Payman(\"zarinpal\", merchant_id=\"YOUR-MERCHANT-ID\", sandbox=True)\n</code></pre> This will route all requests to ZarinPal\u2019s sandbox environment, allowing safe and isolated testing.</p>"},{"location":"gateways/zarinpal/usage/#2-create-a-payment-request","title":"2. Create a Payment Request","text":"<p>Prepare and send a payment request to ZarinPal with the desired amount and callback URL.</p> <pre><code>amount = 10000  # IRR\n\npayment_response = pay.payment(\n    amount=amount,\n    callback_url=\"https://example.com/callback\",\n    description=\"Test Payment\"\n)\nauthority = payment_response.authority\nprint(f\"Payment Authority: {authority}\")\n</code></pre>"},{"location":"gateways/zarinpal/usage/#3-redirect-user-to-payment-url","title":"3. Redirect User to Payment URL","text":"<p>Use the authority code returned by the payment request to generate a URL and redirect your user there to complete the payment.</p> <pre><code>payment_redirect_url = pay.get_payment_redirect_url(authority=authority)\nprint(payment_redirect_url)\n</code></pre>"},{"location":"gateways/zarinpal/usage/#4-receive-callback","title":"4. Receive Callback","text":"<p>After payment, ZarinPal will redirect the user back to your <code>callback_url</code> with payment result parameters via a <code>GET</code> request.</p> <p>The two key query parameters are:</p> <ul> <li><code>Authority</code>: A unique identifier for the payment session.</li> <li><code>Status</code>: Indicates whether the user successfully completed the payment (\"OK\") or canceled/failed it (\"NOK\").</li> </ul> <p><pre><code>from payman.gateways.zarinpal.models import CallbackParams\n\n# This is a simulated example. In real use, extract these from the HTTP request:\ncallback = CallbackParams(authority=\"...\", status=\"OK\")  # CallbackParams uses alias for `Authority` and `Status`\n</code></pre> Note: If you're using FastAPI, Flask, Django, or any other framework, the logic is the same \u2014 just read the Authority and Status from the query string of the incoming <code>GET</code> request.</p> <p>For a better understanding, see the FastAPI example code</p> <p>Example callback URL: <code>https://example.com/callback?Authority=A00000000000000000000000000123456789&amp;Status=OK</code></p>"},{"location":"gateways/zarinpal/usage/#5-verify-payment","title":"5. Verify Payment","text":"<p>Once the user is redirected back to your app, use the received <code>authority</code> code to verify the payment with ZarinPal.</p> <pre><code>verify_response = pay.verify(authority=authority, amount=amount)\n\nref_id = verify_response.ref_id\nprint(f\"Ref ID: {ref_id}\")\n</code></pre> <p>NOTE: Payman supports both sync and async code. All gateway methods like <code>payment()</code> and <code>verify()</code> can be called with or without <code>await</code>, depending on your application's architecture.</p>"},{"location":"gateways/zarinpal/usage/#flexible-input-support","title":"Flexible Input Support","text":"<p>All <code>Payman</code> methods such as <code>payment(...)</code> and <code>verify(...)</code> accept input in three flexible formats:</p> <ul> <li>\u2705 Pydantic model  </li> <li>\u2705 Plain dictionary  </li> <li>\u2705 Keyword arguments (<code>kwargs</code>)</li> </ul> <p>This allows you to choose the most convenient style for your use case.</p>"},{"location":"gateways/zarinpal/usage/#example-payment-in-all-supported-formats","title":"Example: <code>payment(...)</code> in all supported formats","text":"<p><pre><code>from payman import Payman\nfrom payman.gateways.zarinpal.models import PaymentRequest\n\npay = Payman(\"zarinpal\", merchant_id=\"...\")\n\n# 1. Using a Pydantic model\nresp1 = pay.payment(PaymentRequest(\n    amount=10_000,\n    callback_url=\"https://site.com/callback\",\n    description=\"Test A\"\n))\n\n# \u2705 2. Using a dictionary\nresp2 = pay.payment({\n    \"amount\": 10_000,\n    \"callback_url\": \"https://site.com/callback\",\n    \"description\": \"Test B\"\n})\n\n# \u2705 3. Using keyword arguments\nresp3 = pay.payment(\n    amount=10_000,\n    callback_url=\"https://site.com/callback\",\n    description=\"Test C\"\n)\n</code></pre> All three are fully supported and behave exactly the same.</p>"},{"location":"gateways/zarinpal/usage/#input-validation-with-pydantic","title":"Input Validation with Pydantic","text":"<p>Regardless of how you provide input\u2014whether as a Pydantic model, a plain dictionary, or keyword arguments (<code>kwargs</code>)\u2014all data is strictly validated using Pydantic.</p> <p>This means:</p> <ul> <li> <p>Field types are enforced (e.g., amount must be an int)</p> </li> <li> <p>Required fields are checked</p> </li> <li> <p>Invalid or malformed values raise immediate validation errors</p> </li> <li> <p>You get clear and informative pydantic.ValidationError exceptions when something is wrong</p> </li> </ul> <p>This design gives you full flexibility while ensuring that all inputs are consistently validated behind the scenes.</p>"},{"location":"gateways/zarinpal/usage/#example-flexible-input-strict-validation","title":"Example: Flexible Input, Strict Validation","text":"<p><pre><code># Even when using kwargs or a dict, Pydantic validation applies\npay.payment(\n    amount=\"invalid\",  # \u274c raises ValidationError\n    callback_url=\"https://your-site.com\",\n    description=\"Example\"\n)\n</code></pre> You can also catch and handle validation errors gracefully: <pre><code>from pydantic import ValidationError\n\ntry:\n    pay.payment(amount=\"bad\", callback_url=..., description=...)\nexcept ValidationError as e:\n    print(\"Invalid input:\", e)\n</code></pre></p>"},{"location":"gateways/zibal/api/","title":"Zibal API Reference","text":"<p>This page documents the available methods and data models for the Zibal payment gateway integration using the Payman package. It includes detailed parameter tables and exception mappings.</p>"},{"location":"gateways/zibal/api/#instantiating-a-gateway","title":"Instantiating a Gateway","text":"<p>By default, you should use the <code>Payman</code> wrapper class to work with any gateway:</p> <p><pre><code>from payman import Payman\n\npay = Payman(\"zibal\", merchant_id=\"...\")\n</code></pre> This approach allows you to switch gateways dynamically and keeps your code clean and consistent.</p>"},{"location":"gateways/zibal/api/#using-the-zibal-gateway-directly","title":"Using the Zibal Gateway Directly","text":"<p>While it's recommended to use the generic <code>Payman</code> wrapper for consistency,  you can also instantiate the Zibal gateway directly:</p> <p><pre><code>from payman import Zibal\n\npay = Zibal(merchant_id=\"...\")\n</code></pre> This can be useful if you're working exclusively with one gateway and prefer to import it directly.</p>"},{"location":"gateways/zibal/api/#methods","title":"Methods","text":""},{"location":"gateways/zibal/api/#paymentparams-paymentrequest-dict-none-none-paymentresponse","title":"<code>payment(params: PaymentRequest | dict | None = None) -&gt; PaymentResponse</code>","text":"<p>Initiates a new payment request to Zibal.</p>"},{"location":"gateways/zibal/api/#parameters","title":"Parameters","text":"<p><code>params</code> (<code>PaymentRequest</code>)</p> Field Type Required Description <code>amount</code> <code>int</code> (\u2265 100) \u2705 Payment amount in Rial (minimum: 100) <code>callback_url</code> <code>HttpUrl</code> \u2705 URL to redirect the user after payment <code>description</code> <code>str | None</code> \u274c Optional payment description <code>order_id</code> <code>str | None</code> \u274c Optional merchant order identifier <code>mobile</code> <code>constr(min_length=11, max_length=11, pattern=\"^09\\d{9}$\") \\| None</code> \u274c Optional buyer mobile number <code>allowed_cards</code> <code>List[constr(min_length=16, max_length=16, pattern=\"^\\d{16}$\")]\\| None</code> \u274c Optional list of allowed card PANs <code>ledger_id</code> <code>str | None</code> \u274c Optional ledger identifier <code>national_code</code> <code>constr(min_length=10, max_length=10, pattern=\"^\\d{10}$\") \\| None</code> \u274c Optional national code of the buyer <code>check_mobile_with_card</code> <code>bool | None</code> \u274c Optional mobile/card cross-check flag <code>percent_mode</code> <code>Literal[0,1]</code> (default: <code>0</code>) \u274c Revenue-sharing mode: 0=fixed, 1=percent <code>fee_mode</code> <code>Literal[0,1,2]</code> (default: <code>0</code>) \u274c Fee payer mode: 0=shopper, 1=merchant, 2=split <code>multiplexingInfos</code> <code>List[MultiplexingInfo]</code> (default: <code>[]</code>) \u274c Optional multiplexing (split payment) configuration"},{"location":"gateways/zibal/api/#returns","title":"Returns","text":"<p><code>PaymentResponse</code></p> Field Type Description <code>status</code> <code>Status</code> (enum) Payment status code (e.g., <code>SUCCESS</code>, etc.) <code>track_id</code> <code>int</code> Unique transaction tracking ID <code>message</code> <code>str</code> Human-readable result message"},{"location":"gateways/zibal/api/#raises","title":"Raises","text":"<ul> <li><code>ZibalError</code> (base error) and its subclasses depending on error code</li> </ul>"},{"location":"gateways/zibal/api/#lazy_paymentparams-paymentrequest-dict-none-none-paymentresponse","title":"<code>lazy_payment(params: PaymentRequest | dict | None = None) -&gt; PaymentResponse</code>","text":"<p>Initiates a delayed-verification payment. Identical signature and models to <code>payment()</code>.</p>"},{"location":"gateways/zibal/api/#verifyparams-verifyrequest-dict-none-none-verifyresponse","title":"<code>verify(params: VerifyRequest | dict | None = None) -&gt; VerifyResponse</code>","text":"<p>Verifies payment after user redirect or callback.</p>"},{"location":"gateways/zibal/api/#parameters_1","title":"Parameters","text":"<p><code>params</code> (<code>VerifyRequest</code>)</p> Field Type Required Description <code>track_id</code> <code>int</code> \u2705 Transaction tracking ID returned by Zibal"},{"location":"gateways/zibal/api/#returns_1","title":"Returns","text":"<p><code>VerifyResponse</code></p> Field Type Description <code>result</code> <code>int</code> Response status code (100 = success) <code>message</code> <code>str</code> Result message <code>amount</code> <code>int | None</code> Paid amount in Rial <code>status</code> <code>int | None</code> Bank transaction status (1=success,2=canceled) <code>paid_at</code> <code>str | None</code> ISO 8601 payment timestamp <code>card_number</code> <code>str | None</code> Masked payer card number <code>ref_number</code> <code>str | None</code> Bank reference number <code>order_id</code> <code>str | None</code> Merchant order ID <code>description</code> <code>str | None</code> Additional description <code>track_id</code> <code>int | None</code> Tracking ID <code>multiplexingInfos</code> <code>List[MultiplexingInfo]</code> Optional split payment details"},{"location":"gateways/zibal/api/#raises_1","title":"Raises","text":"<ul> <li><code>ZibalError</code> or subclasses</li> </ul>"},{"location":"gateways/zibal/api/#callback_verifycallback-callbackparams-dict-none-none-verifyresponse","title":"<code>callback_verify(callback: CallbackParams  | dict | None = None) -&gt; VerifyResponse</code>","text":"<p>Server-to-server verification using callback payload.</p>"},{"location":"gateways/zibal/api/#parameters_2","title":"Parameters","text":"<p><code>callback</code> (<code>CallbackParams</code>)</p> Field Type Description <code>track_id</code> <code>int</code> Transaction ID from callback <code>success</code> <code>int</code> 1 = success, 0 = failure <code>order_id</code> <code>str</code> Merchant order ID <code>status</code> <code>Status | int</code> Payment status code"},{"location":"gateways/zibal/api/#returns_2","title":"Returns","text":"<p><code>VerifyResponse</code> (same as above)</p>"},{"location":"gateways/zibal/api/#raises_2","title":"Raises","text":"<ul> <li><code>ZibalError</code> or subclasses</li> </ul>"},{"location":"gateways/zibal/api/#inquiryparams-inquiryrequest-dict-none-none-inquiryresponse","title":"<code>inquiry(params: InquiryRequest | dict | None = None) -&gt; InquiryResponse</code>","text":"<p>Fetches current transaction status.</p>"},{"location":"gateways/zibal/api/#parameters_3","title":"Parameters","text":"<p><code>params</code> (<code>InquiryRequest</code>)</p> Field Type Required Description <code>track_id</code> <code>int</code> \u2705 Transaction tracking ID"},{"location":"gateways/zibal/api/#returns_3","title":"Returns","text":"<p><code>InquiryResponse</code></p> Field Type Description <code>result</code> <code>int</code> Response status code <code>message</code> <code>str</code> Status message <code>ref_number</code> <code>int | None</code> Bank reference number <code>paid_at</code> <code>str | None</code> Payment timestamp (ISO 8601) <code>verified_at</code> <code>str | None</code> Verification timestamp <code>status</code> <code>int</code> Payment status <code>amount</code> <code>int</code> Amount of transaction <code>order_id</code> <code>str</code> Merchant order ID <code>description</code> <code>str</code> Transaction description <code>card_number</code> <code>str | None</code> Masked card number <code>wage</code> <code>int</code> Associated wage <code>created_at</code> <code>str</code> Transaction creation timestamp <code>multiplexingInfos</code> <code>List[MultiplexingInfo]</code> Revenue sharing details"},{"location":"gateways/zibal/api/#get_payment_redirect_urltrack_id-int-str","title":"<code>get_payment_redirect_url(track_id: int) -&gt; str</code>","text":"<p>Builds the URL for redirecting the user to Zibal\u2019s payment page.</p>"},{"location":"gateways/zibal/api/#parameters_4","title":"Parameters","text":"<ul> <li><code>track_id</code> (<code>int</code>): Tracking ID from <code>payment()</code> or <code>lazy_payment()</code>.</li> </ul>"},{"location":"gateways/zibal/api/#returns_4","title":"Returns","text":"<ul> <li><code>str</code>: Complete redirect URL.</li> </ul> <p>Example:</p> <pre><code>url = pay.get_payment_redirect_url(track_id=123456)\n</code></pre> <p>Result: <code>https://gateway.zibal.ir/start/123456</code></p> <p>Note: Methods can be used in synchronous or asynchronous contexts. Just use <code>await</code> in async functions.</p>"},{"location":"gateways/zibal/api/#exception-handling","title":"Exception Handling","text":"<p>All Zibal-specific errors inherit from <code>ZibalError</code>. The gateway automatically raises the proper subclass based on the status code.</p> <p>Zibal error subclasses:</p> <ul> <li><code>MerchantNotFoundError</code></li> <li><code>MerchantInactiveError</code></li> <li><code>InvalidMerchantError</code></li> <li><code>AmountTooLowError</code></li> <li><code>InvalidCallbackUrlError</code></li> <li><code>InvalidPercentModeError</code></li> <li><code>InvalidMultiplexingBeneficiariesError</code></li> <li><code>InactiveMultiplexingBeneficiaryError</code></li> <li><code>MissingSelfBeneficiaryError</code></li> <li><code>AmountMismatchInMultiplexingError</code></li> <li><code>InsufficientWalletBalanceForFeesError</code></li> <li><code>AmountExceedsLimitError</code></li> <li><code>InvalidNationalCodeError</code></li> <li><code>AlreadyConfirmedError</code></li> <li><code>PaymentNotSuccessfulError</code></li> <li><code>InvalidTrackIdError</code></li> </ul>"},{"location":"gateways/zibal/api/#sandbox-testing","title":"Sandbox Testing","text":"<p>\ud83e\uddea Test Mode: To use Zibal in sandbox mode, set your <code>merchant_id</code> to the string <code>\"zibal\"</code>. This simulates transactions for development purposes.</p> <pre><code>from payman import Zibal\n\npay = Zibal(merchant_id=\"zibal\")\n</code></pre> <p>This lets you safely test the entire payment flow without processing real transactions.</p>"},{"location":"gateways/zibal/usage/","title":"Using Zibal Gateway with Payman","text":"<p>This section guides you on how to integrate the Zibal payment gateway using the Payman Python package. You will find examples for both asynchronous and synchronous usage to suit various application types.</p>"},{"location":"gateways/zibal/usage/#quick-start-guide-for-zibal-integration","title":"Quick Start Guide for Zibal Integration","text":"<p>Follow these simple steps to integrate Zibal payment gateway with Payman:</p>"},{"location":"gateways/zibal/usage/#1-initialize-the-gateway","title":"1. Initialize the Gateway","text":"<p>Import <code>Payman</code> and create an instance with your merchant ID:</p> <pre><code>from payman import Payman\n\npay = Payman(\"zibal\", merchant_id=\"YOUR-MERCHANT-ID\")\n</code></pre>"},{"location":"gateways/zibal/usage/#note-test-mode-for-development","title":"Note: Test Mode for Development","text":"<p>Zibal provides a test mode that allows you to safely test payment flows without real transactions. To use Zibal in test mode:</p> <ul> <li>Set your <code>merchant_id</code> to the string \"zibal\", which activates test behavior automatically.</li> </ul> <p>Example:</p> <p><pre><code>from payman import Payman\n\npay = Payman(\"zibal\", merchant_id=\"zibal\")\n</code></pre> This will trigger mock responses from Zibal, allowing you to fully test your integration in a safe, non-production environment.</p>"},{"location":"gateways/zibal/usage/#2-create-a-payment-request","title":"2. Create a Payment Request","text":"<p>Prepare and send a payment request to Zibal with the desired amount and callback URL.</p> <pre><code>amount = 10_000  # IRR\n\npayment_response = pay.payment(\n    amount=amount,\n    callback_url=\"https://example.com/callback\",\n    description=\"Test Payment\",\n)\n\ntrack_id = payment_response.track_id\nprint(f\"Track ID: {track_id}\")\n</code></pre>"},{"location":"gateways/zibal/usage/#3-redirect-user-to-payment-url","title":"3. Redirect User to Payment URL","text":"<p>Use the <code>track_id</code> returned from the payment request to generate the redirect URL for the user. <pre><code>payment_redirect_url = pay.get_payment_redirect_url(track_id=track_id)\nprint(payment_redirect_url)\n</code></pre> This URL should be used to redirect the user to Zibal's payment page.</p>"},{"location":"gateways/zibal/usage/#4-receive-callback","title":"4. Receive Callback","text":"<p>After the payment process, Zibal will redirect the user back to your <code>callback_url</code> with payment result parameters via a <code>GET</code> request.</p> <p>The key query parameters are:</p> <ul> <li><code>trackId</code>: A unique identifier for the transaction.</li> <li><code>success</code>: 1 if the transaction was successful, 0 otherwise.</li> </ul> <p>You can validate these using CallbackParams: <pre><code>from payman.gateways.zibal.models import CallbackParams\n\n# This is an example. In production, extract from your framework's request:\ncallback = CallbackParams(track_id=track_id, success=1, status=100, order_id=\"my-order-id\")\n\nif callback.is_successful():\n    print(\"Transaction succeeded!\")\n</code></pre> In FastAPI, Flask, or Django, you'll extract these values from the incoming request query params.</p> <p>Example callback URL: <pre><code>https://example.com/callback?trackId=123456&amp;success=1&amp;status=100&amp;orderId=my-order-id\n</code></pre></p>"},{"location":"gateways/zibal/usage/#5-verify-payment","title":"5. Verify Payment","text":"<p>Once the user is redirected back, use the <code>track_id</code> to verify the payment with Zibal.</p> <pre><code>verify_response = pay.verify(track_id=track_id)\n\nref_number = verify_response.ref_number\nprint(f\"Bank Ref Number: {ref_number}\")\n</code></pre> <p>NOTE: Payman supports both sync and async code. All gateway methods like <code>payment()</code> and <code>verify()</code> can be called with or without <code>await</code>, depending on your application's architecture.</p>"},{"location":"gateways/zibal/usage/#summary","title":"Summary","text":"Step Description 1. Init Create <code>Zibal</code> with your merchant ID 2. Payment Send payment request and receive <code>track_id</code> 3. Redirect Redirect user to Zibal payment page 4. Callback Receive result on your callback URL 5. Verify Confirm transaction status with <code>track_id</code>"},{"location":"gateways/zibal/usage/#flexible-input-support","title":"Flexible Input Support","text":"<p>All <code>Payman</code> methods such as <code>payment(...)</code> and <code>verify(...)</code> accept input in three flexible formats:</p> <ul> <li>\u2705 Pydantic model  </li> <li>\u2705 Plain dictionary  </li> <li>\u2705 Keyword arguments (<code>kwargs</code>)</li> </ul> <p>This allows you to choose the most convenient style for your use case.</p>"},{"location":"gateways/zibal/usage/#example-payment-in-all-supported-formats","title":"Example: <code>payment(...)</code> in all supported formats","text":"<p><pre><code>from payman import Payman\nfrom payman.gateways.zibal.models import PaymentRequest\n\npay = Payman(\"zibal\", merchant_id=\"...\")\n\n# 1. Using a Pydantic model\nresp1 = pay.payment(PaymentRequest(\n    amount=10_000,\n    callback_url=\"https://site.com/callback\",\n    description=\"Test A\"\n))\n\n# \u2705 2. Using a dictionary\nresp2 = pay.payment({\n    \"amount\": 10_000,\n    \"callback_url\": \"https://site.com/callback\",\n    \"description\": \"Test B\"\n})\n\n# \u2705 3. Using keyword arguments\nresp3 = pay.payment(\n    amount=10_000,\n    callback_url=\"https://site.com/callback\",\n    description=\"Test C\"\n)\n</code></pre> All three are fully supported and behave exactly the same.</p>"},{"location":"gateways/zibal/usage/#input-validation-with-pydantic","title":"Input Validation with Pydantic","text":"<p>Regardless of how you provide input\u2014whether as a Pydantic model, a plain dictionary, or keyword arguments (<code>kwargs</code>)\u2014all data is strictly validated using Pydantic.</p> <p>This means:</p> <ul> <li> <p>Field types are enforced (e.g., amount must be an int)</p> </li> <li> <p>Required fields are checked</p> </li> <li> <p>Invalid or malformed values raise immediate validation errors</p> </li> <li> <p>You get clear and informative pydantic.ValidationError exceptions when something is wrong</p> </li> </ul> <p>This design gives you full flexibility while ensuring that all inputs are consistently validated behind the scenes.</p>"},{"location":"gateways/zibal/usage/#example-flexible-input-strict-validation","title":"Example: Flexible Input, Strict Validation","text":"<p><pre><code># Even when using kwargs or a dict, Pydantic validation applies\npay.payment(\n    amount=\"invalid\",  # \u274c raises ValidationError\n    callback_url=\"https://your-site.com\",\n    description=\"Example\"\n)\n</code></pre> You can also catch and handle validation errors gracefully: <pre><code>from pydantic import ValidationError\n\ntry:\n    pay.payment(amount=\"bad\", callback_url=..., description=...)\nexcept ValidationError as e:\n    print(\"Invalid input:\", e)\n</code></pre></p>"}]}